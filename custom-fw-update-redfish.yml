- name: Automating firmware updates with redfish for XD670s
  hosts: xds
  connection: local
  gather_facts: yes
  vars: 
    bmc_username: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=hsys-secrets/data/torch/ipmi:username', auth_method='jwt', mount_point='kubernetes', role_id='aap', jwt=jwt) }}"
    bmc_password: "{{ lookup('community.hashi_vault.hashi_vault', 'secret=hsys-secrets/data/torch/ipmi:password', auth_method='jwt', mount_point='kubernetes', role_id='aap', jwt=jwt) }}"
    ansible_hashi_vault_url: 'https://vault.hpc.nyu.edu'
    ansible_hashi_vault_validate_certs: false
    baseuri: "{{ ansible_host }}"
    dest_dir: "/runner/project"
    bios_fw: "{{ dest_dir }}/CUXD670_5.32_v2.05_signed.bin.hpm"
    bmc_fw: "{{ dest_dir }}/XD670_BMC_v1.22_signed.bin.hpm"
    web_int_bmc_url: "{{ web_int }}/software/hpe/xd670/2025.08.00/XD670_BMC_v1.22_signed.bin.hpm"
    web_int_gpu_fw_url: "{{ web_int }}/software/hpe/xd670//2025.09.00/GPUFW/H100_H200/FW_v1-7-1_Retimer_v2-10-35_HGX_H100_H200_8-GPU_PC/nvfw_HGX-H100x8_0017_250627.1.9_prod-signed.fwpkg" 
    web_int_gpu_tool: "{{ web_int }}/software/hpe/xd670/GPUFW/H200/H200_tool_V1.0.6.zip"
    # cpld_fw: "software/hpe/xd670/2025.08.00/"
    web_int: "http://files-webserver.hpc-infra.svc.cluster.local:8080"
    desired_versions:
      BMC: "01.22.00"
      # BMC_SKU: "1750736455"
      BIOS: "CUXD670_5.32_v2.05"
      MB_CPLD1: "22"
      BPB_CPLD1: "05"
      BPB_CPLD2: "32"
      SCM_CPLD1: "10"
      HGX_FW_BMC_0: "HGX-22.10-1-rc80"
      HGX_FW_FPGA_0: "2.53"
      HGX_FW_ERoT_BMC_0: "00.02.0192.0000_n00"
      HGX_FW_ERoT_FPGA_0: "00.02.0192.0000_n00"
      HGX_FW_GPU_SXM_: "96.00.D0.00.0D"
      HGX_FW_NVSwitch_: "96.10.6D.00.01"
      HGX_FW_PCIeRetimer_: "2.10.35"
      HGX_FW_ERoT_NVSwitch_: "00.02.0192.0000_n00"
      HGX_FW_ERoT_GPU_SXM_: "00.02.0192.0000_n00"
      HGX_InfoROM_GPU_SXM_: "G520.0282.02.02"
      HGX_InfoROM_NVSwitch_: "5612.0002.00.01"
  tasks:
    - name: Get Vault SA token
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: cicd
        namespace: u-workbench-cte3
      register: cicd
      no_log: "{{ log_debug | default(true) }}"
      delegate_to: 127.0.0.1
      become: false
      tags: always
    - name: Set JWT variable
      ansible.builtin.set_fact:
        jwt: "{{ cicd.resources[0].data.token | b64decode }}"
      no_log: "{{ log_debug | default(true) }}"
      become: false
      tags: always

    - name: Get all firmware versions via Redfish
      block:
        - name: Get firmware versions
          ansible.builtin.uri:
            url: "https://{{ ansible_host }}/redfish/v1/UpdateService/FirmwareInventory/{{ item }}"
            method: GET
            user: "{{ bmc_username }}"
            password: "{{ bmc_password }}"
            force_basic_auth: true
            validate_certs: false
            return_content: true
            headers:
              Accept: "application/json"
            status_code: [200, 404]
          loop:
            - BMC
            # - BMC_SKU
            - BIOS
            - MB_CPLD1
            - BPB_CPLD1
            - BPB_CPLD2
            - SCM_CPLD1
            - HGX_FW_GPU_SXM_1
            - HGX_FW_GPU_SXM_2
            - HGX_FW_GPU_SXM_3
            - HGX_FW_GPU_SXM_4
            - HGX_FW_GPU_SXM_5
            - HGX_FW_GPU_SXM_6
            - HGX_FW_GPU_SXM_7
            - HGX_FW_GPU_SXM_8
            - HGX_FW_NVSwitch_0
            - HGX_FW_NVSwitch_1
            - HGX_FW_NVSwitch_2
            - HGX_FW_NVSwitch_3
            - HGX_FW_PCIeRetimer_0
            - HGX_FW_PCIeRetimer_1
            - HGX_FW_PCIeRetimer_2
            - HGX_FW_PCIeRetimer_3
            - HGX_FW_PCIeRetimer_4
            - HGX_FW_PCIeRetimer_5
            - HGX_FW_PCIeRetimer_6
            - HGX_FW_PCIeRetimer_7
            - HGX_FW_PCIeRetimer_8
            - HGX_FW_ERoT_GPU_SXM_1
            - HGX_FW_ERoT_GPU_SXM_2
            - HGX_FW_ERoT_GPU_SXM_3
            - HGX_FW_ERoT_GPU_SXM_4
            - HGX_FW_ERoT_GPU_SXM_5
            - HGX_FW_ERoT_GPU_SXM_6
            - HGX_FW_ERoT_GPU_SXM_7
            - HGX_FW_ERoT_GPU_SXM_8
            - HGX_FW_ERoT_NVSwitch_0
            - HGX_FW_ERoT_NVSwitch_1
            - HGX_FW_ERoT_NVSwitch_2
            - HGX_FW_ERoT_NVSwitch_3
            - HGX_InfoROM_GPU_SXM_1
            - HGX_InfoROM_GPU_SXM_2
            - HGX_InfoROM_GPU_SXM_3
            - HGX_InfoROM_GPU_SXM_4
            - HGX_InfoROM_GPU_SXM_5
            - HGX_InfoROM_GPU_SXM_6
            - HGX_InfoROM_GPU_SXM_7
            - HGX_InfoROM_GPU_SXM_8
            - HGX_InfoROM_NVSwitch_0
            - HGX_InfoROM_NVSwitch_1
            - HGX_InfoROM_NVSwitch_2
            - HGX_InfoROM_NVSwitch_3
            - HGX_FW_ERoT_BMC_0
            - HGX_FW_ERoT_FPGA_0
            - HGX_FW_FPGA_0
            - HGX_FW_BMC_0
          register: inv_specific
          failed_when: false

        - name: Map for requested components
          ansible.builtin.set_fact:
            versions: >-
              {{
                dict(
                  (inv_specific.results
                    | selectattr('status','equalto',200)
                    | map(attribute='json')
                    | map(attribute='Id') | list)
                  |
                  zip(
                    inv_specific.results
                    | selectattr('status','equalto',200)
                    | map(attribute='json')
                    | map(attribute='Version') | list
                  )
                )
              }}
    
        - name: Show versions for requested components
          ansible.builtin.debug:
            var: versions

        - name: Show mismatched firmware (simple)
          ansible.builtin.debug:
            msg: |
              Host: {{ inventory_hostname }}
              {% for r in inv_specific.results if r.status == 200 %}
              {% set id = r.json.Id %}
              {% set v = r.json.Version %}
              {% for p, expected in desired_versions.items() %}
              {% if id.startswith(p) and v != expected %}
              - {{ id }} current={{ v }} expected={{ expected }}
              {% endif %}
              {% endfor %}
              {% endfor %}
      tags: getfw
    
    - name: Bmc Firmware Update via Redfish
      block:
        - name: Fetch firmware file
          ansible.builtin.get_url:
            url: "{{ web_int_bmc_url }}"
            dest: "/runner/project"
        - name: Multipart HTTP push firmware update 
          community.general.redfish_command:
            category: Update
            command: MultipartHTTPPushUpdate
            baseuri: "{{ baseuri }}"
            username: "{{ bmc_username }}"
            password: "{{ bmc_password }}"
            validate_certs: false
            timeout: 600
            update_protocol: HTTP
            update_image_file: "{{ bmc_fw }}"
            update_targets:
              - /redfish/v1/UpdateService/FirmwareInventory/BMC
            wait: true
            wait_timeout: 1200
            update_custom_oem_header: OemParameters
            update_custom_oem_mime_type: "application/json"
            update_custom_oem_params: "{{ oem_payload | to_json }}"
          vars:
            oem_payload:
              ImageType: HPM_BMC
          register: bmc_update
        
        - name: Show BMC update result
          ansible.builtin.debug:
            var: bmc_update

        - name: Pause for 1 min to start flashing firmware
          ansible.builtin.pause:
            minutes: 1

        - name: Watch firmware progress
          ansible.builtin.uri:
            url: "http://{{ ansible_host }}/redfish/v1/UpdateService"
            method: GET
            user: "{{ bmc_username }}"
            password: "{{ bmc_password }}"
            force_basic_auth: true
            validate_certs: false
            return_content: true
          register: progress
          until: >
            (progress.json.Oem.AMIUpdateService.UpdateInformation.UpdateStatus | default('', true) is match("(?i)^(completed)$"))
          retries: 300
          delay: 3

        - name: Pause for 3 mins to apply firmware
          ansible.builtin.pause:
            minutes: 3

        - name: Get firmware versions after BMC update
          ansible.builtin.uri:
            url: "https://{{ ansible_host }}/redfish/v1/UpdateService/FirmwareInventory/BMC"
            method: GET
            user: "{{ bmc_username }}"
            password: "{{ bmc_password }}"
            force_basic_auth: true
            validate_certs: false
            return_content: true
            headers:
              Accept: "application/json"
            status_code: [200, 404]
          register: current_bmc_version
          failed_when: false
        
        - name: Show BMC version after update
          ansible.builtin.debug:
            var: current_bmc_version.json.Version
      tags: bmc

    - name: GPU Firmware Update via HPE tool
      block:
        - name: Create GPU firmware working directory
          ansible.builtin.file:
            path: "/runner/project/gpu_fw_update"
            state: directory
            mode: '0755'
          delegate_to: localhost

        - name: Fetch GPU firmware tool
          ansible.builtin.get_url:
            url: "{{ web_int_gpu_tool }}"
            dest: "/runner/project/gpu_fw_update/"
          delegate_to: localhost

        - name: Unzip GPU firmware tool
          ansible.builtin.unarchive:
            src: "/runner/project/gpu_fw_update/H200_tool_V1.0.6.zip"
            dest: "/runner/project/gpu_fw_update/"
            remote_src: yes
          delegate_to: localhost
        
        - name: Fetch GPU firmware files
          ansible.builtin.get_url:
            url: "{{ web_int_gpu_fw_url }}"
            dest: "/runner/project/gpu_fw_update/H200_tool_V1.0.6/"
          delegate_to: localhost
   
        - name: Make GPU firmware script executable
          ansible.builtin.file:
            path: "/runner/project/gpu_fw_update/H200_tool_V1.0.6/H200_tool_V1.0.6.sh"
            mode: '0755'
          delegate_to: localhost

        - name: Get current firmware version
          ansible.builtin.shell: |
            cd /runner/project/gpu_fw_update/H200_tool_V1.0.6
            ./H200_tool_V1.0.6.sh {{ ansible_host }} {{ bmc_username }} {{ bmc_password }} list
          register: gpu_version_before
          delegate_to: localhost
        
        - name: Show BEFORE version details
          ansible.builtin.debug:
            var: gpu_version_before.stdout_lines
          delegate_to: localhost 

        - name: Run GPU firmware update script
          ansible.builtin.shell: |
            cd /runner/project/gpu_fw_update/H200_tool_V1.0.6
            ./H200_tool_V1.0.6.sh {{ ansible_host }} {{ bmc_username }} {{ bmc_password }} update ./nvfw_HGX-H100x8_0017_250627.1.9_prod-signed.fwpkg 40
          register: gpu_fw_update_result
          async: 3000
          poll: 10
          delegate_to: localhost

        - name: Show GPU firmware update result
          ansible.builtin.debug:
            var: gpu_fw_update_result.stdout_lines
          delegate_to: localhost
        
        - name: Pause for bmc to come back
          ansible.builtin.pause:
            minutes: 3
          
        - name: Get current firmware version
          ansible.builtin.shell: |
            cd /runner/project/gpu_fw_update/H200_tool_V1.0.6
            ./H200_tool_V1.0.6.sh {{ ansible_host }} {{ bmc_username }} {{ bmc_password }} list
          register: gpu_version_after
          delegate_to: localhost

        - name: Show BEFORE version details
          ansible.builtin.debug:
            var: gpu_version_after.stdout_lines
          delegate_to: localhost 
       
        - name: Show firmware version diff (clean format)
          ansible.builtin.debug:
            msg: |
              Host: {{ inventory_hostname }}
              Changed: {{ gpu_version_before.stdout_lines != gpu_version_after.stdout_lines }}
              {% for item in gpu_version_before.stdout_lines %}
              {%   if item not in gpu_version_after.stdout_lines %}
              - Removed: {{ item }}
              {%   endif %}
              {% endfor %}
              {% for item in gpu_version_after.stdout_lines %}
              {%   if item not in gpu_version_before.stdout_lines %}
              - Added: {{ item }}
              {%   endif %}
              {% endfor %}
          delegate_to: localhost
      tags: gpu_fw
